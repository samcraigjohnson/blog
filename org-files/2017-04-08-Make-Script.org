#+TITLE: A script to make scripts
#+DATE: 2017-04-08

I am always looking for ways to type less. I find that when I am working I usually search and run the last =x= commands in my bash history. This made me think it would be nice to have a way to roll up the last =x= commands into a single script.

Here is the bash function I came up with:

#+BEGIN_SRC sh
make_script() {
    NUM=$1
    NAME=$2
    FILE_PATH=~/bin/$NAME
    cat > $FILE_PATH <<EOF
#!/bin/bash        
# Autogenerated by make_script command found in ~/.functions
#
# Usage: ./$NAME
#

EOF
    history | tail -$NUM | cut -f 1 -d ' ' --complement >> $FILE_PATH
    chmod +x $FILE_PATH
    echo "Made script at location: $FILE_PATH"
}
#+END_SRC

Lets break this down. The command takes two arguments =NUM= and =NAME=. It then sets up a basic template of a bash script in my personal =~/bin= folder. The meat of the function is this line:

#+BEGIN_SRC sh
history | tail -$NUM | cut -f 1 -d ' ' --complement >> $FILE_PATH
#+END_SRC

The =history= built in function prints out all of the commands I have run in my terminal. The history is then piped (sent) to =tail= which grabs the last =NUM= commands. The output might look something like this:

#+BEGIN_SRC sh
10302  cd ~/work
10303  docker run -d redis
#+END_SRC

The next portion =cut -f 1 -d ' ' --complement= is used to get rid of the line numbers in the history output. We are then left with just the bash commands that I have run. These are then appended to the end of the new script template we wrote at the beginning of the script.

Now I can run =make_script 2 cd_docker=, which pulls the last two commands out of my history and writes a script called =cd_docker= to my personal bin directory. I have this directory in my =PATH= so I am instantly able to run =cd_docker= and that will execute those commands.
